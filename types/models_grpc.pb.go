// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: types/models.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	TwitterService_GetUser_FullMethodName   = "/TwitterService/GetUser"
	TwitterService_GetTweets_FullMethodName = "/TwitterService/GetTweets"
)

// TwitterServiceClient is the client API for TwitterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitterServiceClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	GetTweets(ctx context.Context, in *TweetsRequest, opts ...grpc.CallOption) (*TweetsResponse, error)
}

type twitterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitterServiceClient(cc grpc.ClientConnInterface) TwitterServiceClient {
	return &twitterServiceClient{cc}
}

func (c *twitterServiceClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, TwitterService_GetUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitterServiceClient) GetTweets(ctx context.Context, in *TweetsRequest, opts ...grpc.CallOption) (*TweetsResponse, error) {
	out := new(TweetsResponse)
	err := c.cc.Invoke(ctx, TwitterService_GetTweets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitterServiceServer is the server API for TwitterService service.
// All implementations must embed UnimplementedTwitterServiceServer
// for forward compatibility
type TwitterServiceServer interface {
	GetUser(context.Context, *UserRequest) (*UserResponse, error)
	GetTweets(context.Context, *TweetsRequest) (*TweetsResponse, error)
	mustEmbedUnimplementedTwitterServiceServer()
}

// UnimplementedTwitterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTwitterServiceServer struct {
}

func (UnimplementedTwitterServiceServer) GetUser(context.Context, *UserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedTwitterServiceServer) GetTweets(context.Context, *TweetsRequest) (*TweetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTweets not implemented")
}
func (UnimplementedTwitterServiceServer) mustEmbedUnimplementedTwitterServiceServer() {}

// UnsafeTwitterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitterServiceServer will
// result in compilation errors.
type UnsafeTwitterServiceServer interface {
	mustEmbedUnimplementedTwitterServiceServer()
}

func RegisterTwitterServiceServer(s grpc.ServiceRegistrar, srv TwitterServiceServer) {
	s.RegisterService(&TwitterService_ServiceDesc, srv)
}

func _TwitterService_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServiceServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitterService_GetUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServiceServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitterService_GetTweets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TweetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitterServiceServer).GetTweets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitterService_GetTweets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitterServiceServer).GetTweets(ctx, req.(*TweetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitterService_ServiceDesc is the grpc.ServiceDesc for TwitterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TwitterService",
	HandlerType: (*TwitterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _TwitterService_GetUser_Handler,
		},
		{
			MethodName: "GetTweets",
			Handler:    _TwitterService_GetTweets_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "types/models.proto",
}
